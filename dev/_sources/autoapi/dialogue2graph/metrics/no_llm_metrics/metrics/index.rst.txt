dialogue2graph.metrics.no_llm_metrics.metrics
=============================================

.. py:module:: dialogue2graph.metrics.no_llm_metrics.metrics

.. autoapi-nested-parse::

   Automatic Metrics.
   ------------------

   The module contains functions that automatically (without using LLMs) check Graphs and Dialogues
   for various metrics.



Attributes
----------

.. autoapisummary::

   dialogue2graph.metrics.no_llm_metrics.metrics.logger
   dialogue2graph.metrics.no_llm_metrics.metrics.logger


Classes
-------

.. autoapisummary::

   dialogue2graph.metrics.no_llm_metrics.metrics.AbsentTriplet
   dialogue2graph.metrics.no_llm_metrics.metrics.DGTripletsMatchResult
   dialogue2graph.metrics.no_llm_metrics.metrics.InvalidDialogueTransition
   dialogue2graph.metrics.no_llm_metrics.metrics.DialogueValidationResult


Functions
---------

.. autoapisummary::

   dialogue2graph.metrics.no_llm_metrics.metrics.match_graph_triplets
   dialogue2graph.metrics.no_llm_metrics.metrics.is_same_structure
   dialogue2graph.metrics.no_llm_metrics.metrics.match_dialogue_triplets
   dialogue2graph.metrics.no_llm_metrics.metrics.match_dg_triplets
   dialogue2graph.metrics.no_llm_metrics.metrics.are_paths_valid
   dialogue2graph.metrics.no_llm_metrics.metrics.match_roles
   dialogue2graph.metrics.no_llm_metrics.metrics.is_correct_length
   dialogue2graph.metrics.no_llm_metrics.metrics.are_answers_similar
   dialogue2graph.metrics.no_llm_metrics.metrics.all_utterances_present
   dialogue2graph.metrics.no_llm_metrics.metrics.triplet_match_accuracy
   dialogue2graph.metrics.no_llm_metrics.metrics.compute_graph_metrics


Module Contents
---------------

.. py:data:: logger

.. py:data:: logger

.. py:function:: match_graph_triplets(G1: dialogue2graph.pipelines.core.graph.BaseGraph, G2: dialogue2graph.pipelines.core.graph.BaseGraph, change_to_original_ids=False)

   Match two graphs (G1 and G2) by:
     1) Checking isomorphism using NetworkX matchers (depending on whether it's DiGraph or MultiDiGraph).
     2) Building Jaccard similarity matrices for nodes and edges to refine the mapping.
     3) Potentially reverting mapped IDs to G1's original numbering if change_to_original_ids=True.

   :returns:     - node_mapping: which node in G1 corresponds to which node in G2
                 - edge_mapping: which edge in G1 corresponds to which edge in G2
   :rtype: node_mapping, edge_mapping (dict, dict)


.. py:function:: is_same_structure(G1: dialogue2graph.pipelines.core.graph.BaseGraph, G2: dialogue2graph.pipelines.core.graph.BaseGraph, sim_model=None) -> bool

   Check if graphs are isomorphic.

   :param G1: BaseGraph object containing the dialogue graph
   :param G2: BaseGraph object containing the dialogue graph


.. py:function:: match_dialogue_triplets(s1: list[dialogue2graph.pipelines.core.dialogue.Dialogue], s2: list[dialogue2graph.pipelines.core.dialogue.Dialogue])

   Match triplets of two dialogue sequences


.. py:class:: AbsentTriplet

   Bases: :py:obj:`TypedDict`


   To return absent triplets in DGTripletsMatchResult


   .. py:attribute:: source
      :type:  str


   .. py:attribute:: edge
      :type:  str


   .. py:attribute:: target
      :type:  str


   .. py:method:: from_tuple(triplet: tuple[str]) -> AbsentTriplet
      :classmethod:


      Create AbsentTriplet from a tuple



.. py:class:: DGTripletsMatchResult

   Bases: :py:obj:`TypedDict`


   To return result of matching triplets between graph and dialogues


   .. py:attribute:: value
      :type:  bool


   .. py:attribute:: description
      :type:  Optional[str]


   .. py:attribute:: absent_triplets
      :type:  Optional[List[AbsentTriplet]]


.. py:function:: match_dg_triplets(G: dialogue2graph.pipelines.core.graph.BaseGraph, dialogues: list[dialogue2graph.pipelines.core.dialogue.Dialogue]) -> DGTripletsMatchResult

   Check if all graph triplets match triplets in set of dialogues.

   :param G: BaseGraph object containing the dialogue graph
   :param dialogues: List of Dialogue objects to check against


.. py:class:: InvalidDialogueTransition

   Bases: :py:obj:`TypedDict`


   To return invalid dialogue transition in DialogueValidationResult


   .. py:attribute:: from_message
      :type:  str


   .. py:attribute:: to_message
      :type:  str


   .. py:attribute:: dialogue_id
      :type:  str


.. py:class:: DialogueValidationResult

   Bases: :py:obj:`TypedDict`


   To return result of dialogues_are_valid_paths


   .. py:attribute:: value
      :type:  bool


   .. py:attribute:: invalid_transitions
      :type:  Optional[List[InvalidDialogueTransition]]


.. py:function:: are_paths_valid(G: dialogue2graph.pipelines.core.graph.BaseGraph, dialogues: list[dialogue2graph.pipelines.core.dialogue.Dialogue]) -> DialogueValidationResult

   Check if all dialogues are valid paths in the graph.

   :param G: BaseGraph object containing the dialogue graph
   :param dialogues: List of Dialogue objects to check against

   :returns: for every dialogue {"value": bool, "description": "description with dialogue_id and list of pairs when there is no connection from one message to another"}
   :rtype: list


.. py:function:: match_roles(D1: dialogue2graph.pipelines.core.dialogue.Dialogue, D2: dialogue2graph.pipelines.core.dialogue.Dialogue) -> bool

   Check if two dialogues have identical participant roles in each turn.

   :returns: True if they match in every turn, otherwise False.


.. py:function:: is_correct_length(D1: dialogue2graph.pipelines.core.dialogue.Dialogue, D2: dialogue2graph.pipelines.core.dialogue.Dialogue) -> bool

   Check if two dialogues have the same number of messages.

   :returns: True if lengths are equal, False otherwise.


.. py:function:: are_answers_similar(D1: dialogue2graph.pipelines.core.dialogue.Dialogue, D2: dialogue2graph.pipelines.core.dialogue.Dialogue, model, threshold: float) -> bool

   Placeholder for any advanced similarity check between the dialogues' answers.
   Not implemented.


.. py:function:: all_utterances_present(G: dialogue2graph.pipelines.core.graph.BaseGraph, dialogues: List[dialogue2graph.pipelines.core.dialogue.Dialogue])

   Check whether every utterance in the graph (both from nodes and edges)
   appears at least once in the provided dialogues.

   :returns: True if all graph utterances are found within the dialogues, otherwise returns the set of missing utterances.


.. py:function:: triplet_match_accuracy(G1: dialogue2graph.pipelines.core.graph.BaseGraph, G2: dialogue2graph.pipelines.core.graph.BaseGraph, change_to_original_ids: bool = False) -> dict

   Calculate a simple accuracy metric for node and edge matching based on 'match_graph_triplets'.

   :returns:

             {
                 "node_accuracy": fraction_of_matched_nodes_in_G1,
                 "edge_accuracy": fraction_of_matched_edges_in_G1
             }


.. py:function:: compute_graph_metrics(graph_list: List[dialogue2graph.pipelines.core.graph.BaseGraph]) -> dict

   Compute various statistics across a list of Graph objects,
   where each Graph has a 'graph_dict' containing 'edges' and 'nodes'.

   Expects each element in 'graph_list' to be something like:
       Graph(
           graph_dict={
               "edges": [...],
               "nodes": [...]
           },
           graph=<networkx graph object>,
           node_mapping={}
       )

   :returns: a dictionary with the following keys:
             - "with_cycles" (int): How many of the graphs contain at least one cycle.
             - "percentage_with_cycles" (float): Percentage of graphs that have a cycle, out of all.
             - "average_edges_amount" (float): Average number of edges per graph.
             - "average_nodes_amount" (float): Average number of nodes per graph.
             - "total_graphs" (int): Total number of graphs processed.
             - "total_edges" (int): Sum of edges across all graphs.
             - "total_nodes" (int): Sum of nodes across all graphs.
   :rtype: dict


