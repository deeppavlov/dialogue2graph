"""
Schemas
-------

The module contains base classes for graph abstractions.
"""

from typing import List
from pydantic import BaseModel, Field
from dialog2graph.pipelines.core.dialog import Dialog
from dialog2graph.pipelines.core.graph import Metadata


class Edge(BaseModel):
    """ Transition between two nodes in the graph
    Attributes:
        source: ID of the source node
        target: ID of the target node
        utterances: User's utterances that trigger this transition
    """
    source: int = Field(description="ID of the source node")
    target: int = Field(description="ID of the target node")
    utterances: List[str] = Field(
        description="User's utterances that trigger this transition"
    )


class Node(BaseModel):
    """ Node representing an assistant state
    Attributes:
        id: Unique identifier for the node
        label: Label describing the node's purpose
        is_start: Whether this is the starting node
        utterances: Possible assistant responses at this node
    """

    id: int = Field(description="Unique identifier for the node")
    label: str = Field(description="Label describing the node's purpose")
    is_start: bool = Field(description="Whether this is the starting node")
    utterances: List[str] = Field(
        description="Possible assistant responses at this node"
    )


class DialogGraph(BaseModel):
    """ Complete graph structure representing a dialog
    Attributes:
        edges: List of transitions between nodes
        nodes: List of nodes representing assistant states
    """
    edges: List[Edge] = Field(description="List of transitions between nodes")
    nodes: List[Node] = Field(description="List of nodes representing assistant states")


class ReasonGraph(BaseModel):
    """ Generated by LLM graph structure representing a dialog
    Attributes:
        edges: List of transitions between nodes
        nodes: List of nodes representing assistant states
        reason: Description of LLM answer
    """
    edges: List[Edge] = Field(description="List of transitions between nodes")
    nodes: List[Node] = Field(description="List of nodes representing assistant states")
    reason: str = Field(description="Description of LLM answer")


class GraphGenerationResult(BaseModel):
    """Complete graph generation result with graph and dialogs
    Attributes:
        graph: Generated graph structure
        metadata: Metadata of the graph
        topic: Topic of the graph
        dialogs: List of dialogs sampled from the graph
    """

    graph: DialogGraph
    metadata: Metadata
    topic: str
    dialogs: List[Dialog]


class CompareResponse(BaseModel):
    """LLM Response of comparison between two graphs
    Attributes:
        value: Whether two graphs are equal
        description: Explanation of the comparison
    """
    
    value: bool = Field(default=True, description="compare result")
    description: str = Field(description="explanation")
