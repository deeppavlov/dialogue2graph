dialog2graph.pipelines.report
=============================

.. py:module:: dialog2graph.pipelines.report

.. autoapi-nested-parse::

   Report
   ------

   The module provides creating pipeline reports in various formats.



Classes
-------

.. autoapisummary::

   dialog2graph.pipelines.report.PipelineReport


Module Contents
---------------

.. py:class:: PipelineReport(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   PipelineReport is a model for generating and managing reports for a service pipeline.
   It provides functionality to store properties, subreports, and export the report in
   various formats such as JSON, CSV, Markdown, and plain text.

   .. attribute:: model_config

      Configuration for the model, allowing arbitrary types.

      :type: ConfigDict

   .. attribute:: service

      Name of the service for which the report is generated.

      :type: str

   .. attribute:: properties

      Dictionary containing essential report data such as time, metrics, etc.

      :type: dict

   .. attribute:: subreports

      List of subreports from pipeline steps.

      :type: List[metrics.DGReportType]


   .. py:attribute:: model_config

      Configuration for the model, should be a dictionary conforming to [`ConfigDict`][pydantic.config.ConfigDict].


   .. py:attribute:: service
      :type:  str
      :value: None



   .. py:attribute:: properties
      :type:  dict
      :value: None



   .. py:attribute:: subreports
      :type:  List[dialog2graph.metrics.DGReportType]
      :value: None



   .. py:method:: add_property(property_name: str, value)

      Add a property to the report.
      :param property_name: Name of the property to add.
      :type property_name: str
      :param value: Value of the property to add.



   .. py:method:: add_subreport(subreport: dialog2graph.metrics.DGReportType)

      Add a subreport to the report.
      :param subreport: Subreport to add.
      :type subreport: metrics.DGReportType



   .. py:method:: to_json(path: pathlib.Path = 'report.json')

      Export the report to a JSON file.



   .. py:method:: to_csv(path: pathlib.Path = 'report.csv')

      Export the report to a CSV file.



   .. py:method:: to_html()
      :abstractmethod:



   .. py:method:: to_markdown(path: pathlib.Path = 'report.md')

      Export the report to a Markdown file.



   .. py:method:: to_text(path: pathlib.Path = 'report.txt')

      Export the report to a plain text file.



   .. py:method:: __str__()

      String representation of the report with color formatting.



