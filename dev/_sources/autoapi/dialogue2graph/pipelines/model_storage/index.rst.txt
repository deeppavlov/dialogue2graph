dialogue2graph.pipelines.model_storage
======================================

.. py:module:: dialogue2graph.pipelines.model_storage


Attributes
----------

.. autoapisummary::

   dialogue2graph.pipelines.model_storage.logger


Classes
-------

.. autoapisummary::

   dialogue2graph.pipelines.model_storage.GetModelInstance
   dialogue2graph.pipelines.model_storage.StoredData
   dialogue2graph.pipelines.model_storage.ModelStorage


Module Contents
---------------

.. py:data:: logger

.. py:class:: GetModelInstance(config: dict)

   .. py:attribute:: config
      :type:  dict


   .. py:method:: instantiate(class_name)


.. py:class:: StoredData(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   StoredData is a Pydantic model that represents the storage structure for a model, its configuration, and metadata.

   .. attribute:: key

      Key for the stored model.

      :type: str

   .. attribute:: config

      Configuration for the stored model.

      :type: dict

   .. attribute:: model_type

      Type of the stored model, either "llm" (language model) or "emb" (embedding model).

      :type: Union[Literal["llm"], Literal["emb"]]

   .. attribute:: model

      The actual model object, which can either be a HuggingFaceEmbeddings instance or a BaseChatModel instance.

      :type: Union[HuggingFaceEmbeddings, BaseChatModel]

   .. method:: validate_model(cls, values)

      
      Validates the `model` attribute based on the `model_type`. Ensures that:
      - If `model_type` is "llm", the `model` must be an instance of BaseChatModel.
      - If `model_type` is "emb", the `model` must be an instance of HuggingFaceEmbeddings.
      :raises ValueError: If the `model` does not match the expected type for the given `model_type`.
      


   .. py:attribute:: key
      :type:  str
      :value: None



   .. py:attribute:: config
      :type:  dict
      :value: None



   .. py:attribute:: model_type
      :type:  pydantic._internal._model_construction.ModelMetaclass
      :value: None



   .. py:attribute:: model
      :type:  Union[langchain_huggingface.HuggingFaceEmbeddings, langchain_core.language_models.BaseChatModel]
      :value: None



   .. py:method:: validate_model(values)


   .. py:class:: Config

      .. py:attribute:: arbitrary_types_allowed
         :value: True



      .. py:attribute:: validate_assignment
         :value: False




.. py:class:: ModelStorage(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   ModelStorage is a class for managing the storage of model configurations and instances.
   It provides functionality to load configurations from a YAML file, add new models to the storage,
   and save the current storage state back to a YAML file.

   .. attribute:: storage

      A dictionary that holds the stored model configurations
      and their corresponding instances.

      :type: Dict[str, StoredData]


   .. py:attribute:: storage
      :type:  Dict[str, StoredData]
      :value: None



   .. py:method:: load(path: pathlib.Path)

      Load model configurations from a YAML file into the storage.

      :param path: The file path to the YAML file containing model configurations.
      :type path: str



   .. py:method:: add(key: str, config: dict, model_type: pydantic._internal._model_construction.ModelMetaclass, overwright: bool = False)

              Add a new model configuration to the storage.

              Args:
                  key (str): The unique identifier for the model configuration.
                  config (dict): The configuration dictionary for initializing the model.
                  model_type (ModelMetaclass): The type name of the model to be added.
                  overwright (bool): Whether to overwright model existing under same key
      .
              Raises:
                  KeyError: If configuration keys are invalid for the specified model_type.
                  Exception: When adding model to the storage failed



   .. py:method:: save(path: str)

      Save the current model storage to a YAML file.

      :param path: The file path where the storage data will be saved.
      :type path: str



