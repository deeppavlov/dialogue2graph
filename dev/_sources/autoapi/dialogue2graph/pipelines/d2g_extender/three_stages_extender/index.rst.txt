dialogue2graph.pipelines.d2g_extender.three_stages_extender
===========================================================

.. py:module:: dialogue2graph.pipelines.d2g_extender.three_stages_extender

.. autoapi-nested-parse::

   Three Stage D2GExtender
   -----------------------

   The module provides three step algorithm aimed to extend dialog graph by generating.



Attributes
----------

.. autoapisummary::

   dialogue2graph.pipelines.d2g_extender.three_stages_extender.logger
   dialogue2graph.pipelines.d2g_extender.three_stages_extender.logger
   dialogue2graph.pipelines.d2g_extender.three_stages_extender.dialogue_sampler


Classes
-------

.. autoapisummary::

   dialogue2graph.pipelines.d2g_extender.three_stages_extender.DialogueNodes
   dialogue2graph.pipelines.d2g_extender.three_stages_extender.LLMGraphExtender


Module Contents
---------------

.. py:class:: DialogueNodes(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Class for dialog nodes


   .. py:attribute:: nodes
      :type:  List[dialogue2graph.pipelines.core.schemas.Node]
      :value: None



.. py:data:: logger

.. py:data:: logger

.. py:data:: dialogue_sampler

.. py:class:: LLMGraphExtender(model_storage: dialogue2graph.pipelines.model_storage.ModelStorage, grouping_llm: str = 'extender_grouping_llm:v1', extending_llm: str = 'extender_extending_llm:v1', filling_llm: str = 'extender_filling_llm:v1', formatting_llm: str = 'extender_formatting_llm:v1', dialog_llm: str = 'extender_dialog_llm:v1', sim_model: str = 'extender_sim_model:v1', step1_evals: list[Callable] | None = [], extender_evals: list[Callable] | None = [], step2_evals: list[Callable] | None = [], end_evals: list[Callable] | None = [], step: int = 2)

   Bases: :py:obj:`dialogue2graph.pipelines.core.d2g_generator.DGBaseGenerator`


   Graph generator which iteratively takes step dialogues and adds them to graph
   generated on the previous step. First step is done with LightGraphGenerator or taken from
   supported graph
   Generation stages:

   1.
       a. If supported graph is given, it is used as a start. Otherwise, graph is generated with LLMGraphGenerator from first step dialogs
       b. Algorithmic connecting nodes by edges.
   2. Iterative steps:
       a. LLM extension of graph nodes with next step dialogs.
       b. Algorithmic connecting nodes by edges.
   3. If one of dialogues ends with user's utterance, ask LLM to add missing edges.

   .. attribute:: model_storage

      Model storage

   .. attribute:: extending_llm

      Name of LLM for extending graph nodes

   .. attribute:: filling_llm

      Name of LLM for adding missing edges

   .. attribute:: dialog_llm

      Name of LLM used in dialog sampler

   .. attribute:: formatting_llm

      Name of LLM for formatting other LLMs output

   .. attribute:: sim_model

      HuggingFace name for similarity model

   .. attribute:: step

      number of dialogs for one step

   .. attribute:: graph_generator

      graph generator for the first stage

   .. attribute:: step1_evals

      Evaluation metrics called after first stage

   .. attribute:: extender_evals

      Evaluation metrics called after each extension step

   .. attribute:: step2_evals

      Evaluation metrics called after stage 2

   .. attribute:: end_evals

      Evaluation metrics called at the end of generation process

   .. attribute:: model_config

      It's a parameter for internal use of Pydantic


   .. py:attribute:: model_storage
      :type:  dialogue2graph.pipelines.model_storage.ModelStorage
      :value: None



   .. py:attribute:: extending_llm
      :type:  str
      :value: None



   .. py:attribute:: filling_llm
      :type:  str
      :value: None



   .. py:attribute:: formatting_llm
      :type:  str
      :value: None



   .. py:attribute:: dialog_llm
      :type:  str
      :value: None



   .. py:attribute:: sim_model
      :type:  str
      :value: None



   .. py:attribute:: step
      :type:  int


   .. py:attribute:: graph_generator
      :type:  dialogue2graph.pipelines.d2g_llm.three_stages_llm.LLMGraphGenerator


   .. py:attribute:: step1_evals
      :type:  list[Callable]


   .. py:attribute:: extender_evals
      :type:  list[Callable]


   .. py:attribute:: step2_evals
      :type:  list[Callable]


   .. py:attribute:: end_evals
      :type:  list[Callable]


   .. py:attribute:: model_config

      Configuration for the model, should be a dictionary conforming to [`ConfigDict`][pydantic.config.ConfigDict].


   .. py:method:: invoke(pipeline_data: dialogue2graph.pipelines.helpers.parse_data.PipelineDataType, enable_evals: bool = False) -> tuple[dialogue2graph.pipelines.core.graph.BaseGraph, dialogue2graph.metrics.DGReportType]

      Invoke primary method of the three stages generation algorithm.

      :param pipeline_data: data for generation and evaluation.
      :param enable_evals: when true, evaluate method is called.

      :returns: A tuple containing the resulting graph and report dictionary.



   .. py:method:: ainvoke(*args, **kwargs)
      :async:



