dialog2graph.pipelines.core.schemas
===================================

.. py:module:: dialog2graph.pipelines.core.schemas

.. autoapi-nested-parse::

   Schemas
   -------

   The module contains base classes for graph abstractions.



Classes
-------

.. autoapisummary::

   dialog2graph.pipelines.core.schemas.Edge
   dialog2graph.pipelines.core.schemas.Node
   dialog2graph.pipelines.core.schemas.DialogGraph
   dialog2graph.pipelines.core.schemas.ReasonGraph
   dialog2graph.pipelines.core.schemas.GraphGenerationResult
   dialog2graph.pipelines.core.schemas.CompareResponse


Module Contents
---------------

.. py:class:: Edge(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Transition between two nodes in the graph
   .. attribute:: source

      ID of the source node

   .. attribute:: target

      ID of the target node

   .. attribute:: utterances

      User's utterances that trigger this transition


   .. py:attribute:: source
      :type:  int
      :value: None



   .. py:attribute:: target
      :type:  int
      :value: None



   .. py:attribute:: utterances
      :type:  List[str]
      :value: None



.. py:class:: Node(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Node representing an assistant state
   .. attribute:: id

      Unique identifier for the node

   .. attribute:: label

      Label describing the node's purpose

   .. attribute:: is_start

      Whether this is the starting node

   .. attribute:: utterances

      Possible assistant responses at this node


   .. py:attribute:: id
      :type:  int
      :value: None



   .. py:attribute:: label
      :type:  str
      :value: None



   .. py:attribute:: is_start
      :type:  bool
      :value: None



   .. py:attribute:: utterances
      :type:  List[str]
      :value: None



.. py:class:: DialogGraph(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Complete graph structure representing a dialog
   .. attribute:: edges

      List of transitions between nodes

   .. attribute:: nodes

      List of nodes representing assistant states


   .. py:attribute:: edges
      :type:  List[Edge]
      :value: None



   .. py:attribute:: nodes
      :type:  List[Node]
      :value: None



.. py:class:: ReasonGraph(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Generated by LLM graph structure representing a dialog
   .. attribute:: edges

      List of transitions between nodes

   .. attribute:: nodes

      List of nodes representing assistant states

   .. attribute:: reason

      Description of LLM answer


   .. py:attribute:: edges
      :type:  List[Edge]
      :value: None



   .. py:attribute:: nodes
      :type:  List[Node]
      :value: None



   .. py:attribute:: reason
      :type:  str
      :value: None



.. py:class:: GraphGenerationResult(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Complete graph generation result with graph and dialogs
   .. attribute:: graph

      Generated graph structure

   .. attribute:: metadata

      Metadata of the graph

   .. attribute:: topic

      Topic of the graph

   .. attribute:: dialogs

      List of dialogs sampled from the graph


   .. py:attribute:: graph
      :type:  DialogGraph


   .. py:attribute:: metadata
      :type:  dialog2graph.pipelines.core.graph.Metadata


   .. py:attribute:: topic
      :type:  str


   .. py:attribute:: dialogs
      :type:  List[dialog2graph.pipelines.core.dialog.Dialog]


.. py:class:: CompareResponse(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   LLM Response of comparison between two graphs
   .. attribute:: value

      Whether two graphs are equal

   .. attribute:: description

      Explanation of the comparison


   .. py:attribute:: value
      :type:  bool
      :value: None



   .. py:attribute:: description
      :type:  str
      :value: None



